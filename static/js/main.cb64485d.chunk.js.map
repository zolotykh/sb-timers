{"version":3,"sources":["screens/timers/Timers.module.css","components/button/Button.module.css","components/button/Button.tsx","screens/timers/components/ControlsContext.ts","screens/timers/components/Controls.tsx","screens/timers/components/Control.tsx","utils/createPlanner.ts","utils/createTimersQueue.ts","hooks/useTimersQueue.ts","screens/timers/useTimers.ts","hooks/useOutput.ts","screens/timers/Timers.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","ButtonComp","text","onClick","type","className","styles","button","Button","memo","ControlsContext","createContext","controlClassName","log","addTimer","Controls","children","style","clear","contextValue","useMemo","Provider","value","Control","id","time","ctx","useContext","options","enqueue","plannedAt","Date","toLocaleTimeString","console","createTimersQueue","currentTimerId","queue","cursor","add","callback","wait","next","push","setTimeout","undefined","clearTimeout","length","useTimers","outputRef","useRef","useReducer","i","reRender","output","current","reset","useOutput","timersQueue","Timers","timers","timers__controls","timers__control","readOnly","timers__log","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+FACAA,EAAOC,QAAU,CAAC,OAAS,uBAAuB,iBAAmB,iCAAiC,gBAAkB,gCAAgC,YAAc,8B,kBCAtKD,EAAOC,QAAU,CAAC,OAAS,yB,uKCSrBC,EAA+B,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,QAC5C,OACE,wBAAQC,KAAK,SAASC,UAAWC,IAAOC,OAAQJ,QAASA,EAAzD,SACGD,KAKMM,EAASC,eAAKR,GCLdS,EAAkBC,wBAAgC,CAC7DC,iBAAkB,GAElBC,IAH6D,aAI7DC,SAJ6D,eCSlDC,EAA+B,SAAC,GAAiE,IAA/DC,EAA8D,EAA9DA,SAAUC,EAAoD,EAApDA,MAAOL,EAA6C,EAA7CA,iBAAkBM,EAA2B,EAA3BA,MAAOL,EAAoB,EAApBA,IAAKC,EAAe,EAAfA,SACtFK,EAAiCC,mBAAQ,iBAAO,CAAEP,MAAKD,mBAAkBE,cAAa,CAC1FD,EACAD,EACAE,IAGF,OACE,cAACJ,EAAgBW,SAAjB,CAA0BC,MAAOH,EAAjC,SACE,qBAAId,UAAWY,EAAf,UACGD,EACD,oBAAIX,UAAWO,EAAf,SACE,cAACJ,EAAD,CAAQN,KAAK,mDAAWC,QAASe,YClB9BK,EAA6B,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,GAAIC,EAAW,EAAXA,KACzCC,EAAMC,qBAAWjB,GACjBP,EAAUiB,mBACd,kBCE0BQ,EDDV,CACZJ,KACAC,OACAZ,IAAKa,EAAIb,IACTgB,QAASH,EAAIZ,UCFZ,WACL,IAAMgB,GAAa,IAAIC,MAAQC,qBAE/BJ,EAAQC,SAAQ,WACd,IAAM3B,EAAI,WAAO,IAAI6B,MAAQC,qBAAnB,aAA4CJ,EAAQJ,GAApD,cAA4DM,GACtEF,EAAQf,IAAIX,GACZ+B,QAAQpB,IAAIX,KACX0B,EAAQH,OARc,IAACG,IDO1B,CAACJ,EAAIC,IAGP,OACE,oBAAIpB,UAAWqB,EAAId,iBAAnB,SACE,cAACJ,EAAD,CAAQN,KAAI,+CAAYsB,GAAMrB,QAASA,OEFtC,SAAS+B,IACd,IAcIC,EAdEC,EAAyC,GAK3CC,EAAS,EAgDb,MAAO,CACLC,IAtCgB,SAACC,EAAUC,GAC3B,IAAMC,EAAO,WACPL,EAAMC,KACRD,EAAMC,KAEND,EAAMC,GAAU,KAChBA,MAaJD,EAAMM,MATsC,WAC1CP,EAAkBQ,YAAW,WAE3BR,OAAiBS,EACjBL,IACAE,MACCD,MAMAL,GACHM,KAgBFvB,MATY,WACZ2B,aAAaV,GACbA,OAAiBS,EACjBR,EAAMU,OAAS,EACfT,EAAS,IC/EN,I,OCAMU,EAAY,WAAO,IAAD,ECDN,WACvB,IAAMC,EAAYC,iBAAO,IADI,EAERC,sBAAW,SAACC,GAAD,OAAOA,EAAI,IAAG,GAArCC,EAFoB,oBAgB7B,MAAO,CACLC,OAAQL,EAAUM,QAClBzC,IAdU,SAACX,GACX8C,EAAUM,QAAUN,EAAUM,QAAQR,OAAlB,UACbE,EAAUM,QADG,aACSpD,GACzBA,EACJkD,KAWAG,MARY,WACZP,EAAUM,QAAU,GACpBF,MDX6BI,GAAvBH,EADqB,EACrBA,OAAQxC,EADa,EACbA,IAAK0C,EADQ,EACRA,MAEfE,EDFCrC,kBAAQc,EAAmB,ICalC,MAAO,CACLI,IAAKmB,EAAYnB,IACjBpB,MARY,WACZqC,IAEAE,EAAYvC,SAMZL,MACAwC,WEfSK,EAAS,WAAO,IAAD,EACUX,IAA5BT,EADkB,EAClBA,IAAKpB,EADa,EACbA,MAAOL,EADM,EACNA,IAAKwC,EADC,EACDA,OAEzB,OACE,sBAAKhD,UAAWC,IAAOqD,OAAvB,UACE,eAAC,EAAD,CACEzC,MAAOA,EACPJ,SAAUwB,EACVrB,MAAOX,IAAOsD,iBACdhD,iBAAkBN,IAAOuD,gBACzBhD,IAAKA,EALP,UAOE,cAAC,EAAD,CAASW,GAAI,EAAGC,KAAM,MACtB,cAAC,EAAD,CAASD,GAAI,EAAGC,KAAM,MACtB,cAAC,EAAD,CAASD,GAAI,EAAGC,KAAM,SAGxB,oDAEA,0BAAUqC,UAAU,EAAMzD,UAAWC,IAAOyD,YAAazC,MAAO+B,QCbvDW,MARf,WACE,OACE,qBAAK3D,UAAU,MAAf,SACE,cAAC,EAAD,OCOS4D,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.cb64485d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"timers\":\"Timers_timers__39X0C\",\"timers__controls\":\"Timers_timers__controls__q57Hi\",\"timers__control\":\"Timers_timers__control__1gzbR\",\"timers__log\":\"Timers_timers__log__1pzK3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__2cZ5P\"};","import React from \"react\";\nimport { memo, FC } from \"react\";\nimport styles from \"./Button.module.css\";\n\ninterface IButtonProps {\n  text: string;\n\n  onClick?(): void;\n}\n\nconst ButtonComp: FC<IButtonProps> = ({ text, onClick }) => {\n  return (\n    <button type=\"button\" className={styles.button} onClick={onClick}>\n      {text}\n    </button>\n  );\n};\n\nexport const Button = memo(ButtonComp);\n","import { createContext } from \"react\";\nimport { TAdd } from \"../../../utils/createTimersQueue\";\n\nexport interface IControlsContext {\n  /**\n   * CSS module className\n   */\n  controlClassName: string;\n\n  log(value: string): void;\n  addTimer: TAdd;\n}\n\nexport const ControlsContext = createContext<IControlsContext>({\n  controlClassName: \"\",\n\n  log() {},\n  addTimer() {},\n});\n","import React, { useMemo } from \"react\";\nimport { FC } from \"react\";\nimport { Button } from \"../../../components/button/Button\";\nimport { TAdd, TClear } from \"../../../utils/createTimersQueue\";\nimport { ControlsContext, IControlsContext } from \"./ControlsContext\";\n\ninterface IControlsProps {\n  /**\n   * CSS modules className\n   */\n  style: string;\n\n  /**\n   * CSS modules className\n   */\n  controlClassName: string;\n\n  clear: TClear;\n  addTimer: TAdd;\n  log(value: string): void;\n}\n\nexport const Controls: FC<IControlsProps> = ({ children, style, controlClassName, clear, log, addTimer }) => {\n  const contextValue: IControlsContext = useMemo(() => ({ log, controlClassName, addTimer }), [\n    log,\n    controlClassName,\n    addTimer,\n  ]);\n\n  return (\n    <ControlsContext.Provider value={contextValue}>\n      <ul className={style}>\n        {children}\n        <li className={controlClassName}>\n          <Button text=\"Сбросить\" onClick={clear} />\n        </li>\n      </ul>\n    </ControlsContext.Provider>\n  );\n};\n","import React from \"react\";\nimport { useContext, useMemo, FC } from \"react\";\nimport { Button } from \"../../../components/button/Button\";\nimport { createPlanner } from \"../../../utils/createPlanner\";\nimport { TWaitTime } from \"../../../utils/createTimersQueue\";\nimport { ControlsContext } from \"./ControlsContext\";\n\ninterface IControlProps {\n  /**\n   * Control button id\n   */\n  id: number;\n\n  time: TWaitTime;\n}\n\nexport const Control: FC<IControlProps> = ({ id, time }) => {\n  const ctx = useContext(ControlsContext);\n  const onClick = useMemo(\n    () =>\n      createPlanner({\n        id,\n        time,\n        log: ctx.log,\n        enqueue: ctx.addTimer,\n      }),\n    // observe only props\n    // eslint-disable-next-line\n    [id, time],\n  );\n\n  return (\n    <li className={ctx.controlClassName}>\n      <Button text={`Кнопка ${id}`} onClick={onClick} />\n    </li>\n  );\n};\n","import { TTimerCallback, TWaitTime } from \"../utils/createTimersQueue\";\n\ninterface ICreatePlannerOptions {\n  /**\n   * Index or id of planner\n   */\n  id: number;\n\n  time: TWaitTime;\n\n  /**\n   * Add output\n   */\n  log(text: string): void;\n\n  /**\n   * Enqueue timer\n   */\n  enqueue(cb: TTimerCallback, time: TWaitTime): void;\n}\n\nexport const createPlanner = (options: ICreatePlannerOptions) => {\n  return () => {\n    const plannedAt = (new Date()).toLocaleTimeString();\n\n    options.enqueue(() => {\n      const text = `${(new Date()).toLocaleTimeString()}: ${options.id} / ${plannedAt}`;\n      options.log(text);\n      console.log(text);\n    }, options.time);\n  };\n};\n","import { Branded } from \"../type-utils/Branded\";\n\n/**\n * setTimeout's callback\n */\nexport type TTimerCallback = (...args: unknown[]) => unknown;\n\n/**\n * Wait time in milliseconds\n */\nexport type TWaitTime = Branded<number, \"milliseconds\">;\n\n/**\n * Add timer to queue\n * @param callback setTimeout's callback\n * @param wait time in milliseconds before firing callback\n */\nexport type TAdd = (callback: TTimerCallback, wait: TWaitTime) => void;\n\n/**\n * Clear queue and stop current timer\n */\nexport type TClear = () => void;\n\nexport interface IQueueAPI {\n  add: TAdd;\n  clear: TClear;\n}\n\ntype TTimerInitializer = () => void;\n\nexport function createTimersQueue(): IQueueAPI {\n  const queue: Array<TTimerInitializer | null> = [];\n  /**\n   * Cursor to actual timer initializer in the queue.\n   * It should be incremented after firing timer initializer.\n   */\n  let cursor = 0;\n\n  /**\n   * Actual timer id (setTimeout call result) needed to be able to stop current timer.\n   *\n   * Should be `undefined` in next cases:\n   * 1. First planning\n   * 2. If last timer in queue has been fired before planing next one timer (next planning will be same as \"first\")\n   */\n  let currentTimerId: number | undefined;\n\n  const add: TAdd = (callback, wait) => {\n    const next = () => {\n      if (queue[cursor]) {\n        queue[cursor]!();\n        // Clear used initializer\n        queue[cursor] = null;\n        cursor++;\n      }\n    };\n\n    const timerInitializer: TTimerInitializer = () => {\n      currentTimerId = (setTimeout(() => {\n        // See comments about setting it to undefined.\n        currentTimerId = undefined;\n        callback();\n        next();\n      }, wait) as unknown) as number;\n    };\n\n    queue.push(timerInitializer);\n\n    // First planning, there isn't planned timer in the browser's Timers API\n    if (!currentTimerId) {\n      next();\n    }\n  };\n\n  /**\n   * Stop current timer and clear the queue\n   */\n  const clear = () => {\n    clearTimeout(currentTimerId);\n    currentTimerId = undefined;\n    queue.length = 0;\n    cursor = 0;\n  };\n\n  return {\n    add,\n    clear,\n  };\n}\n","import { useMemo } from \"react\";\nimport { createTimersQueue } from \"../utils/createTimersQueue\";\n\nexport const useTimersQueue = () => {\n  return useMemo(createTimersQueue, []);\n};\n","import { useTimersQueue } from \"../../hooks/useTimersQueue\";\nimport { useOutput } from \"../../hooks/useOutput\";\n\nexport const useTimers = () => {\n  const { output, log, reset } = useOutput();\n\n  const timersQueue = useTimersQueue();\n\n  /**\n   * Clears current log output and timers queue\n   */\n  const clear = () => {\n    reset();\n\n    timersQueue.clear();\n  };\n\n  return {\n    add: timersQueue.add,\n    clear,\n    log,\n    output,\n  };\n};\n","import { useRef, useReducer } from \"react\";\n\nexport const useOutput = () => {\n  const outputRef = useRef(\"\");\n  const [, reRender] = useReducer((i) => i + 1, 0);\n\n  const log = (text: string) => {\n    outputRef.current = outputRef.current.length\n      ? `${outputRef.current}\\n${text}`\n      : text;\n    reRender();\n  };\n\n  const reset = () => {\n    outputRef.current = \"\";\n    reRender();\n  };\n\n  return {\n    output: outputRef.current,\n    log,\n    reset,\n  };\n};\n","import React from \"react\";\nimport styles from \"./Timers.module.css\";\nimport { Controls } from \"./components/Controls\";\nimport { Control } from \"./components/Control\";\nimport { useTimers } from \"./useTimers\";\n\nexport const Timers = () => {\n  const { add, clear, log, output } = useTimers();\n\n  return (\n    <div className={styles.timers}>\n      <Controls\n        clear={clear}\n        addTimer={add}\n        style={styles.timers__controls}\n        controlClassName={styles.timers__control}\n        log={log}\n      >\n        <Control id={1} time={1000} />\n        <Control id={2} time={2000} />\n        <Control id={3} time={3000} />\n      </Controls>\n\n      <h3>Лог</h3>\n\n      <textarea readOnly={true} className={styles.timers__log} value={output} />\n    </div>\n  );\n};\n","import React from \"react\";\nimport \"./App.css\";\nimport { Timers } from \"./screens/timers/Timers\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Timers/>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}